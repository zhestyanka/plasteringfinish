import TelegramBot from 'node-telegram-bot-api'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE'
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID_HERE'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false })

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞—è–≤–∫–∏
interface ContactForm {
  name: string
  phone: string
  email?: string
  message?: string
  area?: string
  address?: string
  source?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
interface CalculatorForm {
  clientPrice: string
  areaToPlaster: string
  layerThickness: string
  areaPerShift: string
  bagPrice: string
  bagWeight: string
  name: string
  phone: string
  email?: string
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Telegram
 */
export async function sendContactFormToTelegram(formData: ContactForm): Promise<boolean> {
  try {
    const message = formatContactFormMessage(formData)
    
    await bot.sendMessage(TELEGRAM_CHAT_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    })
    
    console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ Telegram
 */
export async function sendCalculatorFormToTelegram(formData: CalculatorForm): Promise<boolean> {
  try {
    const message = formatCalculatorFormMessage(formData)
    
    await bot.sendMessage(TELEGRAM_CHAT_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    })
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ Telegram:', error)
    return false
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏
 */
function formatContactFormMessage(formData: ContactForm): string {
  const timestamp = new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  })

  return `
üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê</b>

üìÖ <b>–î–∞—Ç–∞:</b> ${timestamp}
üë§ <b>–ò–º—è:</b> ${formData.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
${formData.email ? `üìß <b>Email:</b> ${formData.email}` : ''}
${formData.area ? `üìè <b>–ü–ª–æ—â–∞–¥—å:</b> ${formData.area}` : ''}
${formData.address ? `üìç <b>–ê–¥—Ä–µ—Å:</b> ${formData.address}` : ''}
${formData.message ? `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${formData.message}` : ''}
${formData.source ? `üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${formData.source}` : ''}

‚ö°Ô∏è <i>–¢—Ä–µ–±—É–µ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>
  `.trim()
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
function formatCalculatorFormMessage(formData: CalculatorForm): string {
  const timestamp = new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  })

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const area = parseFloat(formData.areaToPlaster) || 0
  const price = parseFloat(formData.clientPrice) || 0
  const totalCost = area * price

  return `
üßÆ <b>–†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò</b>

üìÖ <b>–î–∞—Ç–∞:</b> ${timestamp}
üë§ <b>–ò–º—è:</b> ${formData.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
${formData.email ? `üìß <b>Email:</b> ${formData.email}` : ''}

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:</b>
‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –º¬≤: ${formData.clientPrice} ‚ÇΩ
‚Ä¢ –ü–ª–æ—â–∞–¥—å: ${formData.areaToPlaster} –º¬≤
‚Ä¢ –¢–æ–ª—â–∏–Ω–∞ —Å–ª–æ—è: ${formData.layerThickness} –º–º
‚Ä¢ –ü–ª–æ—â–∞–¥—å –∑–∞ —Å–º–µ–Ω—É: ${formData.areaPerShift} –º¬≤
‚Ä¢ –¶–µ–Ω–∞ –º–µ—à–∫–∞: ${formData.bagPrice} ‚ÇΩ
‚Ä¢ –í–µ—Å –º–µ—à–∫–∞: ${formData.bagWeight} –∫–≥

üí∞ <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${totalCost.toLocaleString('ru-RU')} ‚ÇΩ

‚ö°Ô∏è <i>–ö–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Ä–∞—Å—á–µ—Ç–µ!</i>
  `.trim()
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
 */
export async function testTelegramConnection(): Promise<boolean> {
  try {
    const me = await bot.getMe()
    console.log('‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', me.username)
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export async function sendTestMessage(): Promise<boolean> {
  try {
    await bot.sendMessage(TELEGRAM_CHAT_ID, 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–π—Ç–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏', {
      parse_mode: 'HTML'
    })
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return false
  }
}

export default bot
