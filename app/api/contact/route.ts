import { NextRequest, NextResponse } from 'next/server'
import { promises as fs } from 'fs'
import path from 'path'

const contentFilePath = path.join(process.cwd(), 'data', 'content.json')

export async function POST(request: NextRequest) {
  try {
    console.log('üì® API Contact –≤—ã–∑–≤–∞–Ω')
    console.log('üìã Headers:', Object.fromEntries(request.headers.entries()))
    
    const formData = await request.json()
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', formData)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!formData.name || !formData.phone) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:')
      console.log('   name:', formData.name)
      console.log('   phone:', formData.phone)
      return NextResponse.json({ 
        error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º email –∏–∑ content.json
    let recipientEmail = '9110163777@rambler.ru' // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π email
    
    try {
      const fileContents = await fs.readFile(contentFilePath, 'utf8')
      const data = JSON.parse(fileContents)
      if (data.contacts?.email) {
        recipientEmail = data.contacts.email
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è content.json:', error)
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    const emailSubject = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –®—Ç—É–∫–∞—Ç—É—Ä –°–ü–±'
    const emailBody = `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:

–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
Email: ${formData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ü–ª–æ—â–∞–¥—å: ${formData.area || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º¬≤
–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...')
      console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData)
      
      const telegramData = {
        name: formData.name,
        phone: formData.phone,
        email: formData.email || '–ù–µ —É–∫–∞–∑–∞–Ω',
        area: formData.area || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        message: formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        // –î–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        clientPrice: formData.clientPrice || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        areaToPlaster: formData.areaToPlaster || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        layerThickness: formData.layerThickness || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        areaPerShift: formData.areaPerShift || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        bagWeight: formData.bagWeight || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        bagPrice: formData.bagPrice || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        totalCost: formData.totalCost || '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ',
        source: formData.type === 'calculator' ? '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' : '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞'
      }

      console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram:', telegramData)
      console.log('üåê URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', `http://localhost:3000/api/telegram`)

      const telegramResponse = await fetch(`http://localhost:3000/api/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: telegramData,
          type: formData.type || 'contact'
        })
      })

      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Telegram:', telegramResponse.status)
      console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(telegramResponse.headers.entries()))

      const telegramResult = await telegramResponse.json()
      console.log('üì® –†–µ–∑—É–ª—å—Ç–∞—Ç Telegram:', telegramResult)
      
      if (telegramResponse.ok) {
        if (telegramResult.telegramConfigured === false) {
          console.log('‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
        } else {
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
        }
      } else {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramResult.error)
      }
    } catch (telegramError) {
      console.error('‚ùå Telegram error:', telegramError)
      console.error('‚ùå Stack trace:', telegramError instanceof Error ? telegramError.stack : 'No stack trace')
    }

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log('=== –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê ===')
    console.log('–ü–æ–ª—É—á–∞—Ç–µ–ª—å:', recipientEmail)
    console.log('–¢–µ–º–∞:', emailSubject)
    console.log('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:', emailBody)
    console.log('==================')

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ nodemailer –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å
    // –ü—Ä–∏–º–µ—Ä —Å nodemailer:
    /*
    const nodemailer = require('nodemailer')
    
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: 'your-email@gmail.com',
        pass: 'your-app-password'
      }
    })
    
    await transporter.sendMail({
      from: 'your-email@gmail.com',
      to: recipientEmail,
      subject: emailSubject,
      text: emailBody
    })
    */

    return NextResponse.json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      recipientEmail: recipientEmail
    })
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏' 
    }, { status: 500 })
  }
}