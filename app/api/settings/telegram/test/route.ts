import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs'
import path from 'path'

const settingsPath = path.join(process.cwd(), 'data', 'telegram-settings.json')

// POST - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { botToken, chatId } = body

    if (!botToken || !chatId) {
      return NextResponse.json(
        { error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Chat ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      )
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    const testMessage = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–π—Ç–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏

‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: –í–µ–±-—Å–∞–π—Ç`

    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: testMessage,
          parse_mode: 'HTML'
        })
      })

      const result = await response.json()

      if (result.ok) {
        return NextResponse.json({ 
          success: true, 
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
          result: result.result
        })
      } else {
        return NextResponse.json({ 
          success: false, 
          error: `–û—à–∏–±–∫–∞ Telegram API: ${result.description}`,
          code: result.error_code
        })
      }
    } catch (telegramError) {
      return NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Chat ID.'
      })
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' },
      { status: 500 }
    )
  }
}
