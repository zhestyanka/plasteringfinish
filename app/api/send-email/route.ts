import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import { promises as fs } from 'fs'
import path from 'path'

export async function POST(request: NextRequest) {
  try {
    const { to, subject, text } = await request.json()

    console.log('üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:')
    console.log('–ö–æ–º—É:', to)
    console.log('–¢–µ–º–∞:', subject)
    console.log('–¢–µ–∫—Å—Ç:', text)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
    const contentPath = path.join(process.cwd(), 'data', 'content.json')
    const contentData = await fs.readFile(contentPath, 'utf-8')
    const content = JSON.parse(contentData)
    const emailSettings = content.emailSettings || {}
    
    console.log('üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP:', {
      host: emailSettings.smtpHost,
      port: emailSettings.smtpPort,
      user: emailSettings.smtpUser ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω'
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!emailSettings.smtpHost || !emailSettings.smtpUser || !emailSettings.smtpPass) {
      console.log('‚ö†Ô∏è SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º')
      console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–¥–µ–º–æ —Ä–µ–∂–∏–º)')
      return NextResponse.json({ 
        success: true, 
        messageId: `demo-${Date.now()}`,
        message: 'Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ (SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)'
      })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
    const transporter = nodemailer.createTransporter({
      host: emailSettings.smtpHost,
      port: parseInt(emailSettings.smtpPort) || 587,
      secure: emailSettings.smtpSecure || false,
      auth: {
        user: emailSettings.smtpUser,
        pass: emailSettings.smtpPass
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const info = await transporter.sendMail({
      from: emailSettings.smtpUser,
      to: to,
      subject: subject,
      text: text
    })

    console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId)
    return NextResponse.json({ 
      success: true, 
      messageId: info.messageId,
      message: 'Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error)
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email' },
      { status: 500 }
    )
  }
}
