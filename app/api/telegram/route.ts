import { NextRequest, NextResponse } from 'next/server'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.log('‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
      return NextResponse.json({ 
        success: true, 
        message: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
        telegramConfigured: false 
      })
    }

    const body = await request.json()
    const { message, type = 'form' } = body

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 })
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let formattedMessage = ''
    
    switch (type) {
      case 'contact':
        formattedMessage = formatContactMessage(message)
        break
      case 'calculator':
        formattedMessage = formatCalculatorMessage(message)
        break
      case 'callback':
        formattedMessage = formatCallbackMessage(message)
        break
      default:
        formattedMessage = formatDefaultMessage(message)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await sendToTelegram(formattedMessage)
    
    if (telegramResponse.ok) {
      return NextResponse.json({ success: true, message: 'Message sent to Telegram' })
    } else {
      throw new Error('Failed to send to Telegram')
    }

  } catch (error) {
    console.error('Telegram API error:', error)
    return NextResponse.json({ error: 'Failed to send message' }, { status: 500 })
  }
}

async function sendToTelegram(message: string) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'HTML'
    })
  })

  return response
}

function formatContactMessage(data: any) {
  return `
üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê</b>

üìã <b>–¢–∏–ø:</b> –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞

üë§ <b>–ò–º—è:</b> ${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß <b>Email:</b> ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${data.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${data.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${data.source || '–°–∞–π—Ç'}
  `.trim()
}

function formatCalculatorMessage(data: any) {
  const totalCost = data.totalCost || '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ'
  const area = data.area || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
  
  return `
üßÆ <b>–†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò</b>

üë§ <b>–ò–º—è:</b> ${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìê <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ü–ª–æ—â–∞–¥—å: ${area} –º¬≤
‚Ä¢ –¶–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${data.clientPrice || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚ÇΩ/–º¬≤
‚Ä¢ –¢–æ–ª—â–∏–Ω–∞ —Å–ª–æ—è: ${data.layerThickness || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –º–º
‚Ä¢ –ü–ª–æ—â–∞–¥—å –∑–∞ —Å–º–µ–Ω—É: ${data.areaPerShift || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –º¬≤
‚Ä¢ –í–µ—Å –º–µ—à–∫–∞: ${data.bagWeight || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–≥
‚Ä¢ –¶–µ–Ω–∞ –º–µ—à–∫–∞: ${data.bagPrice || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚ÇΩ

üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${totalCost} ‚ÇΩ

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —Å–∞–π—Ç–µ
  `.trim()
}

function formatCallbackMessage(data: any) {
  return `
üìû <b>–ó–ê–Ø–í–ö–ê –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö</b>

üë§ <b>–ò–º—è:</b> ${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
  `.trim()
}

function formatDefaultMessage(data: any) {
  return `
üìù <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>

${Object.entries(data).map(([key, value]) => `‚Ä¢ <b>${key}:</b> ${value}`).join('\n')}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –°–∞–π—Ç
  `.trim()
}
