"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Save, FileText, MessageCircle, Clock, CheckCircle, Calendar, Phone } from "lucide-react"
import { toast } from "sonner"

interface ServicesInfo {
  title: string
  subtitle: string
  description: string
  consultationTitle: string
  consultationDescription: string
  benefits: {
    quick: {
      title: string
      description: string
    }
    free: {
      title: string
      description: string
    }
    convenient: {
      title: string
      description: string
    }
    professional: {
      title: string
      description: string
    }
  }
}

export default function ServicesInfoPage() {
  const [servicesInfo, setServicesInfo] = useState<ServicesInfo>({
    title: "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
    subtitle: "–ù–∞—à–∏ —É—Å–ª—É–≥–∏",
    description: "–û—Ç –¥–µ–º–æ–Ω—Ç–∞–∂–∞ –¥–æ —Ñ–∏–Ω–∏—à–Ω–æ–π –æ—Ç–¥–µ–ª–∫–∏ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫",
    consultationTitle: "–ù–µ –∑–Ω–∞–µ—Ç–µ —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?",
    consultationDescription: "–ù–∞—à –∏–Ω–∂–µ–Ω–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏–µ–¥–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç, –æ—Ü–µ–Ω–∏—Ç –æ–±—ä–µ–º —Ä–∞–±–æ—Ç –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–º–µ—Ç—É. –≠—Ç–æ –Ω–∏ –∫ —á–µ–º—É –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç.",
    benefits: {
      quick: {
        title: "–ë—ã—Å—Ç—Ä–æ",
        description: "–í—ã–µ–∑–¥ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è"
      },
      free: {
        title: "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ",
        description: "–û—Ü–µ–Ω–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
      },
      convenient: {
        title: "–£–¥–æ–±–Ω–æ",
        description: "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è"
      },
      professional: {
        title: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ",
        description: "–û–ø—ã—Ç–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä"
      }
    }
  })
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)

  useEffect(() => {
    loadServicesInfo()
  }, [])

  const loadServicesInfo = async () => {
    try {
      const response = await fetch('/api/data/content')
      if (response.ok) {
        const data = await response.json()
        if (data.servicesInfo) {
          setServicesInfo(data.servicesInfo)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const saveServicesInfo = async () => {
    setIsSaving(true)
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö:', servicesInfo)
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const currentResponse = await fetch('/api/data/content')
      const currentData = await currentResponse.json()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö
      const updatedData = {
        ...currentData,
        servicesInfo: servicesInfo
      }

      console.log('üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ servicesInfo:', updatedData.servicesInfo)

      const response = await fetch('/api/data/content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedData)
      })

      if (response.ok) {
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
        toast.success('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
      } else {
        throw new Error('Failed to save services info')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    } finally {
      setIsSaving(false)
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    saveServicesInfo()
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-coffee-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö</h1>
          <p className="text-gray-600 mt-2">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–£—Å–ª—É–≥–∏"</p>
        </div>
        <Button onClick={saveServicesInfo} disabled={isSaving} className="bg-coffee-600 hover:bg-coffee-700">
          <Save className="w-4 h-4 mr-2" />
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
        </Button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="w-5 h-5 text-coffee-600" />
              <span>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="subtitle">–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞</Label>
              <Input
                id="subtitle"
                value={servicesInfo.subtitle}
                onChange={(e) => setServicesInfo(prev => ({ ...prev, subtitle: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
              <Input
                id="title"
                value={servicesInfo.title}
                onChange={(e) => setServicesInfo(prev => ({ ...prev, title: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id="description"
                value={servicesInfo.description}
                onChange={(e) => setServicesInfo(prev => ({ ...prev, description: e.target.value }))}
                rows={3}
              />
            </div>
          </CardContent>
        </Card>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <MessageCircle className="w-5 h-5 text-coffee-600" />
              <span>–ë–ª–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="consultationTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</Label>
              <Input
                id="consultationTitle"
                value={servicesInfo.consultationTitle}
                onChange={(e) => setServicesInfo(prev => ({ ...prev, consultationTitle: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="consultationDescription">–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</Label>
              <Textarea
                id="consultationDescription"
                value={servicesInfo.consultationDescription}
                onChange={(e) => setServicesInfo(prev => ({ ...prev, consultationDescription: e.target.value }))}
                rows={3}
              />
            </div>
          </CardContent>
        </Card>

        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ë—ã—Å—Ç—Ä–æ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="quickTitle">–ë—ã—Å—Ç—Ä–æ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="quickTitle"
                  value={servicesInfo.benefits.quick.title}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      quick: { ...prev.benefits.quick, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="quickDescription">–ë—ã—Å—Ç—Ä–æ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="quickDescription"
                  value={servicesInfo.benefits.quick.description}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      quick: { ...prev.benefits.quick, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –ë–µ—Å–ø–ª–∞—Ç–Ω–æ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="freeTitle">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="freeTitle"
                  value={servicesInfo.benefits.free.title}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      free: { ...prev.benefits.free, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="freeDescription">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="freeDescription"
                  value={servicesInfo.benefits.free.description}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      free: { ...prev.benefits.free, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –£–¥–æ–±–Ω–æ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="convenientTitle">–£–¥–æ–±–Ω–æ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="convenientTitle"
                  value={servicesInfo.benefits.convenient.title}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      convenient: { ...prev.benefits.convenient, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="convenientDescription">–£–¥–æ–±–Ω–æ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="convenientDescription"
                  value={servicesInfo.benefits.convenient.description}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      convenient: { ...prev.benefits.convenient, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="professionalTitle">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="professionalTitle"
                  value={servicesInfo.benefits.professional.title}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      professional: { ...prev.benefits.professional, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="professionalDescription">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="professionalDescription"
                  value={servicesInfo.benefits.professional.description}
                  onChange={(e) => setServicesInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      professional: { ...prev.benefits.professional, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  )
}
