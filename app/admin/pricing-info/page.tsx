"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Save, FileText, Target, Shield, CheckCircle, Star, Award, Clock } from "lucide-react"
import { toast } from "sonner"

interface PricingInfo {
  subtitle: string
  title: string
  description: string
  estimateTitle: string
  estimateDescription: string
  features: {
    warranty: {
      title: string
      description: string
    }
    visit: {
      title: string
      description: string
    }
    quality: {
      title: string
      description: string
    }
  }
  benefits: {
    guarantee: {
      title: string
      description: string
    }
    team: {
      title: string
      description: string
    }
    rating: {
      title: string
      description: string
    }
  }
  paymentMethods: {
    cash: {
      title: string
      description: string
    }
    card: {
      title: string
      description: string
    }
    transfer: {
      title: string
      description: string
      discount: string
    }
  }
}

export default function PricingInfoPage() {
  const [pricingInfo, setPricingInfo] = useState<PricingInfo>({
    subtitle: "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Ü–µ–Ω—ã",
    title: "–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –º–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à—Ç—É–∫–∞—Ç—É—Ä–∫—É",
    description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
    estimateTitle: "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É",
    estimateDescription: "–ù–∞—à –∏–Ω–∂–µ–Ω–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–æ–≤–µ–¥–µ—Ç –∑–∞–º–µ—Ä—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
    features: {
      warranty: {
        title: "–ì–∞—Ä–∞–Ω—Ç–∏—è",
        description: "–¥–æ 7 –ª–µ—Ç"
      },
      visit: {
        title: "–í—ã–µ–∑–¥",
        description: "–≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è"
      },
      quality: {
        title: "–ö–∞—á–µ—Å—Ç–≤–æ",
        description: "–ø–æ –ì–û–°–¢"
      }
    },
    benefits: {
      guarantee: {
        title: "–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞",
        description: "–î–æ 5 –ª–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç"
      },
      team: {
        title: "–û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        description: "–ë–æ–ª–µ–µ 8 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥"
      },
      rating: {
        title: "–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
        description: "4.9/5 –∑–≤–µ–∑–¥ –ø–æ –æ—Ç–∑—ã–≤–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤"
      }
    },
    paymentMethods: {
      cash: {
        title: "–ù–∞–ª–∏—á–Ω—ã–µ",
        description: "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç"
      },
      card: {
        title: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
        description: "–ë–µ–∑–Ω–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π, –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞"
      },
      transfer: {
        title: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
        description: "–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á–µ—Ç—É –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
        discount: "–°–∫–∏–¥–∫–∞ 5%"
      }
    }
  })
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)

  useEffect(() => {
    loadPricingInfo()
  }, [])

  const loadPricingInfo = async () => {
    try {
      const response = await fetch('/api/data/content')
      if (response.ok) {
        const data = await response.json()
        if (data.pricingInfo) {
          setPricingInfo(data.pricingInfo)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const savePricingInfo = async () => {
    setIsSaving(true)
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:', pricingInfo)
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const currentResponse = await fetch('/api/data/content')
      const currentData = await currentResponse.json()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
      const updatedData = {
        ...currentData,
        pricingInfo: pricingInfo
      }

      console.log('üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ pricingInfo:', updatedData.pricingInfo)

      const response = await fetch('/api/data/content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedData)
      })

      if (response.ok) {
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
        toast.success('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
      } else {
        throw new Error('Failed to save pricing info')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    } finally {
      setIsSaving(false)
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    savePricingInfo()
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-coffee-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö</h1>
          <p className="text-gray-600 mt-2">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–∞—Ä–∏—Ñ—ã"</p>
        </div>
        <Button onClick={savePricingInfo} disabled={isSaving} className="bg-coffee-600 hover:bg-coffee-700">
          <Save className="w-4 h-4 mr-2" />
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
        </Button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Target className="w-5 h-5 text-coffee-600" />
              <span>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="subtitle">–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞</Label>
              <Input
                id="subtitle"
                value={pricingInfo.subtitle}
                onChange={(e) => setPricingInfo(prev => ({ ...prev, subtitle: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
              <Input
                id="title"
                value={pricingInfo.title}
                onChange={(e) => setPricingInfo(prev => ({ ...prev, title: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id="description"
                value={pricingInfo.description}
                onChange={(e) => setPricingInfo(prev => ({ ...prev, description: e.target.value }))}
                rows={3}
              />
            </div>
          </CardContent>
        </Card>

        {/* –ë–ª–æ–∫ —Å–º–µ—Ç—ã */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="w-5 h-5 text-coffee-600" />
              <span>–ë–ª–æ–∫ —Å–º–µ—Ç—ã</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="estimateTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–º–µ—Ç—ã</Label>
              <Input
                id="estimateTitle"
                value={pricingInfo.estimateTitle}
                onChange={(e) => setPricingInfo(prev => ({ ...prev, estimateTitle: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="estimateDescription">–û–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ—Ç—ã</Label>
              <Textarea
                id="estimateDescription"
                value={pricingInfo.estimateDescription}
                onChange={(e) => setPricingInfo(prev => ({ ...prev, estimateDescription: e.target.value }))}
                rows={3}
              />
            </div>
          </CardContent>
        </Card>

        {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ì–∞—Ä–∞–Ω—Ç–∏—è */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="warrantyTitle">–ì–∞—Ä–∞–Ω—Ç–∏—è - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="warrantyTitle"
                  value={pricingInfo.features.warranty.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    features: {
                      ...prev.features,
                      warranty: { ...prev.features.warranty, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="warrantyDescription">–ì–∞—Ä–∞–Ω—Ç–∏—è - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="warrantyDescription"
                  value={pricingInfo.features.warranty.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    features: {
                      ...prev.features,
                      warranty: { ...prev.features.warranty, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –í—ã–µ–∑–¥ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="visitTitle">–í—ã–µ–∑–¥ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="visitTitle"
                  value={pricingInfo.features.visit.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    features: {
                      ...prev.features,
                      visit: { ...prev.features.visit, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="visitDescription">–í—ã–µ–∑–¥ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="visitDescription"
                  value={pricingInfo.features.visit.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    features: {
                      ...prev.features,
                      visit: { ...prev.features.visit, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –ö–∞—á–µ—Å—Ç–≤–æ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="qualityTitle">–ö–∞—á–µ—Å—Ç–≤–æ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="qualityTitle"
                  value={pricingInfo.features.quality.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    features: {
                      ...prev.features,
                      quality: { ...prev.features.quality, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="qualityDescription">–ö–∞—á–µ—Å—Ç–≤–æ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="qualityDescription"
                  value={pricingInfo.features.quality.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    features: {
                      ...prev.features,
                      quality: { ...prev.features.quality, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="guaranteeTitle">–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="guaranteeTitle"
                  value={pricingInfo.benefits.guarantee.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      guarantee: { ...prev.benefits.guarantee, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="guaranteeDescription">–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="guaranteeDescription"
                  value={pricingInfo.benefits.guarantee.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      guarantee: { ...prev.benefits.guarantee, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="teamTitle">–û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="teamTitle"
                  value={pricingInfo.benefits.team.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      team: { ...prev.benefits.team, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="teamDescription">–û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="teamDescription"
                  value={pricingInfo.benefits.team.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      team: { ...prev.benefits.team, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="ratingTitle">–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="ratingTitle"
                  value={pricingInfo.benefits.rating.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      rating: { ...prev.benefits.rating, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="ratingDescription">–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="ratingDescription"
                  value={pricingInfo.benefits.rating.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    benefits: {
                      ...prev.benefits,
                      rating: { ...prev.benefits.rating, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã */}
        <Card>
          <CardHeader>
            <CardTitle>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ù–∞–ª–∏—á–Ω—ã–µ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="cashTitle">–ù–∞–ª–∏—á–Ω—ã–µ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="cashTitle"
                  value={pricingInfo.paymentMethods.cash.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      cash: { ...prev.paymentMethods.cash, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="cashDescription">–ù–∞–ª–∏—á–Ω—ã–µ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="cashDescription"
                  value={pricingInfo.paymentMethods.cash.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      cash: { ...prev.paymentMethods.cash, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="cardTitle">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="cardTitle"
                  value={pricingInfo.paymentMethods.card.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      card: { ...prev.paymentMethods.card, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="cardDescription">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="cardDescription"
                  value={pricingInfo.paymentMethods.card.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      card: { ...prev.paymentMethods.card, description: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>

            {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="transferTitle">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ - –ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="transferTitle"
                  value={pricingInfo.paymentMethods.transfer.title}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      transfer: { ...prev.paymentMethods.transfer, title: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="transferDescription">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ - –û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="transferDescription"
                  value={pricingInfo.paymentMethods.transfer.description}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      transfer: { ...prev.paymentMethods.transfer, description: e.target.value }
                    }
                  }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="transferDiscount">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ - –°–∫–∏–¥–∫–∞</Label>
                <Input
                  id="transferDiscount"
                  value={pricingInfo.paymentMethods.transfer.discount}
                  onChange={(e) => setPricingInfo(prev => ({
                    ...prev,
                    paymentMethods: {
                      ...prev.paymentMethods,
                      transfer: { ...prev.paymentMethods.transfer, discount: e.target.value }
                    }
                  }))}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  )
}
