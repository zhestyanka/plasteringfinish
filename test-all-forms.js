const http = require('http');

function testForm(type, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      name: '–¢–µ—Å—Ç',
      phone: '+7(999)123-45-67',
      email: 'test@test.com',
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      type: type,
      ...data
    });

    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: ${postData}`);

    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/contact',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': postData.length
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({
            status: res.statusCode,
            data: parsed
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            data: responseData
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º...\n');

  // –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞
  try {
    console.log('üìù –¢–µ—Å—Ç 1: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞');
    const result1 = await testForm('contact', {});
    console.log(`   –°—Ç–∞—Ç—É—Å: ${result1.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(result1.data, null, 2)}\n`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
  }

  // –¢–µ—Å—Ç 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
  try {
    console.log('üßÆ –¢–µ—Å—Ç 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä');
    const result2 = await testForm('calculator', {
      clientPrice: '450',
      areaToPlaster: '100',
      layerThickness: '20',
      areaPerShift: '50',
      bagWeight: '30',
      bagPrice: '350',
      totalCost: '45000'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${result2.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(result2.data, null, 2)}\n`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
  }

  // –¢–µ—Å—Ç 3: –£—Å–ª—É–≥–∏
  try {
    console.log('üîß –¢–µ—Å—Ç 3: –£—Å–ª—É–≥–∏');
    const result3 = await testForm('service', {
      service: '–ú–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à—Ç—É–∫–∞—Ç—É—Ä–∫–∞'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${result3.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(result3.data, null, 2)}\n`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
  }

  // –¢–µ—Å—Ç 4: –¢–∞—Ä–∏—Ñ—ã
  try {
    console.log('üí∞ –¢–µ—Å—Ç 4: –¢–∞—Ä–∏—Ñ—ã');
    const result4 = await testForm('pricing', {
      selectedPlan: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
      area: '100',
      totalCost: '45000'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${result4.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(result4.data, null, 2)}\n`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
  }

  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

runTests();
